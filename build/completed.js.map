{"version":3,"sources":["completed.es6.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;kBAqBe,UAAS,UAAT,EAAqB;AAClC,SAAO;AACL,SADK,iBACC,QADD,EACW;AACd,UAAM,SAAS;AACX,cAAM,iBADK;AAEX,cAAM,MAFK;AAGX,cAAM,MAHK;AAIX,oBAAY,YAAY,aAAZ;AAJD,OAAf;AAAA,UAME,iBAAiB,IAAI,OAAJ,CAAY,MAAZ,CANnB;;AAQA,eAAS,OAAT,GAAmB;AACjB,eAAO,KAAK,KAAL,CAAW,aAAG,YAAH,CAAgB,YAAY,eAA5B,CAAX,CAAP;AACD;;AAED,eAAS,WAAT,CAAqB,MAArB,EAA6B;AAC3B,YAAM,KAAK,EAAX;;AAEA,+BAAQ,sBAAc,MAAd,CAAR,EAA+B,OAA/B,CAAuC,gBAAQ;AAAA,4BACxB,KAAK,KAAL,CAAW,GAAX,CADwB;AAAA;AAAA,cACtC,IADsC;AAAA,cAChC,IADgC;;AAE7C,aAAG,IAAH,IAAW,OAAO,IAAP,GAAc,EAAzB;AACD,SAHD;AAIA,eAAO,EAAP;AACD;;AAED,eAAS,MAAT,CAAgB,MAAhB;AAAA,4FAAwB,iBAAe,IAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEhB,cAFgB;;AAAA;AAGtB,0BAAQ,GAAR,CAAY,6BAAZ;AAHsB;AAAA,yBAIhB,IAAI,WAAJ,CAAgB,oBAAhB,EAAsC,cAAtC,CAJgB;;AAAA;AAAA;AAAA,yBAMhB,IAAI,YAAJ,CACJ,eAAK,OAAL,CAAa,SAAb,EAAwB,iBAAxB,CADI,EAEJ,YAAY,aAFR,EAGJ;AACE,+BAAW,IADb;AAEE,iCAAa,CAFf;AAGE,wBAHF,gBAGO,SAHP,EAGkB,CAHlB,EAGqB,GAHrB,EAG0B;AACtB,0BAAI,GAAJ,EAAS;AACP,gCAAQ,KAAR,CAAc,IAAI,OAAlB;AACA,gCAAQ,KAAR,CAAc,SAAd;AACD,uBAHD,MAGO,QAAQ,IAAR,CAAgB,SAAhB;AACR;AARH,mBAHI,CANgB;;AAAA;AAoBtB,0BAAQ,GAAR,CAAY,wBAAZ;;AAEA;AAtBsB,iCAuBQ,KAAK,MAAL,CAAY;AACxC,0BAAM;AADkC,mBAAZ,CAvBR,EAuBd,iBAvBc,gBAuBd,iBAvBc;AA2BhB,2BA3BgB,GA2BJ,YAAY,iBAAZ,CA3BI;AAAA;AAAA,yBA6BhB,gBACH,IADG,CAEF,qDAFE,EAGF,SAHE,EAIF;AACE,gCAAY,IAAI,gBAAM,KAAV,CAAgB;AAC1B,0CAAoB;AADM,qBAAhB;AADd,mBAJE,EAUH,IAVG,CAUE,YAAW;AACf,4BAAQ,GAAR,CAAY,mCAAZ;AACA;AACD,mBAbG,EAcH,KAdG,CAcG,UAAS,GAAT,EAAc;AACnB,4BAAQ,KAAR,CAAc,IAAI,OAAlB;AACD,mBAhBG,CA7BgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAxB;;AAAA;AAAA;AAAA;AAAA;AA+CD;AAvEI,GAAP;AAyED,C;;AA/FD;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AARA;AAUA,IAAM,WAAW,eAAK,IAAL,CAAU,SAAV,EAAqB,YAArB,CAAjB;AAAA,IACE,YAAY,+BADd;AAAA,IAEE,MAAM,IAAI,iBAAJ,EAFR;;AAGE;AACA,iBAAiB,EAAE,KAAK,SAAP,EAJnB;;AAMA,SAAS,WAAT,CAAqB,YAArB,EAAmC;AACjC,SAAO,eAAK,OAAL,CAAa,aAAG,OAAH,EAAb,EAA2B,YAA3B,CAAP;AACD","file":"completed.js","sourcesContent":["import axios from \"axios\";\n// import PromiseSftp from 'promise-sftp'\nimport path from \"path\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport flatten from \"lodash/flatten\";\nimport zipObject from \"lodash/zipObject\";\nimport https from \"https\";\nimport NodeSSH from \"node-ssh\";\nimport chunk from \"lodash/chunk\";\n\nconst localDir = path.join(__dirname, \"../assets/\"),\n  remoteDir = \"/home/phong/api.v1/vaithuhay/\",\n  ssh = new NodeSSH(),\n  // ssh2 = new NodeSSH(),\n  defaultSshOpts = { cwd: remoteDir };\n\nfunction getFilePath(relativePath) {\n  return path.resolve(os.homedir(), relativePath);\n}\n\nexport default function(mainAssets) {\n  return {\n    apply(compiler) {\n      const config = {\n          host: \"188.166.177.127\",\n          port: \"2234\",\n          user: \"root\",\n          privateKey: getFilePath(\".ssh/id_rsa\")\n        },\n        connectPromise = ssh.connect(config);\n\n      function readOld() {\n        return JSON.parse(fs.readFileSync(__dirname + \"/current.json\"));\n      }\n\n      function readCurrent(assets) {\n        const rs = {};\n\n        flatten(Object.values(assets)).forEach(item => {\n          const [file, hash] = item.split(\"?\");\n          rs[file] = hash ? hash : \"\";\n        });\n        return rs;\n      }\n\n      compiler.plugin(\"done\", async function(stat) {\n        // First, empty & re-upload\n        await connectPromise;\n        console.log(\"SSH connection successfully\");\n        await ssh.execCommand(\"rm -rf assets-dist\", defaultSshOpts);\n\n        await ssh.putDirectory(\n          path.resolve(__dirname, \"../assets-dist/\"),\n          remoteDir + \"assets-dist\",\n          {\n            recursive: true,\n            concurrency: 7,\n            tick(localPath, _, err) {\n              if (err) {\n                console.error(err.message);\n                console.error(localPath);\n              } else console.info(`${localPath} successfully uploaded!`);\n            }\n          }\n        );\n        console.log(\"Upload files completed\");\n\n        // Finally, update hash\n        const { assetsByChunkName } = stat.toJson({\n          hash: true\n        });\n\n        const newAssets = readCurrent(assetsByChunkName);\n\n        await axios\n          .post(\n            \"https://server.vaithuhay.com/b/callback/updateTheme\",\n            newAssets,\n            {\n              httpsAgent: new https.Agent({\n                rejectUnauthorized: false\n              })\n            }\n          )\n          .then(function() {\n            console.log(\"Resource hash has been updated :)\");\n            // console.log(postObj);\n          })\n          .catch(function(err) {\n            console.error(err.message);\n          });\n      });\n    }\n  };\n}\n"]}