{"version":3,"sources":["completed.es6.js"],"names":[],"mappings":"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","file":"completed.js","sourcesContent":["import axios from \"axios\";\n// import PromiseSftp from 'promise-sftp'\nimport path from \"path\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport flatten from \"lodash/flatten\";\nimport zipObject from \"lodash/zipObject\";\nimport https from \"https\";\nimport NodeSSH from \"node-ssh\";\nimport chunk from \"lodash/chunk\";\nimport \"@babel/polyfill\";\n\n\nconst localDir = path.join(__dirname, \"../assets/\"),\n  remoteDir = \"/home/phong/api.v1/vaithuhay/\",\n  ssh = new NodeSSH(),\n  // ssh2 = new NodeSSH(),\n  defaultSshOpts = { cwd: remoteDir };\n\nfunction getFilePath(relativePath) {\n  return path.resolve(os.homedir(), relativePath);\n}\n\nexport default function(mainAssets) {\n  return {\n    apply(compiler) {\n      const config = {\n          host: \"188.166.177.127\",\n          port: \"2234\",\n          user: \"root\",\n          privateKey: getFilePath(\".ssh/id_rsa\")\n        },\n        connectPromise = ssh.connect(config);\n\n      function readOld() {\n        return JSON.parse(fs.readFileSync(__dirname + \"/current.json\"));\n      }\n\n      function readCurrent(assets) {\n        const rs = {};\n\n        flatten(Object.values(assets)).forEach(item => {\n          const [file, hash] = item.split(\"?\");\n          rs[file] = hash ? hash : \"\";\n        });\n        return rs;\n      }\n\n      compiler.plugin(\"done\", async function(stat) {\n        // First, empty & re-upload\n        await connectPromise;\n        console.log(\"SSH connection successfully\");\n        await ssh.execCommand(\"rm -rf assets-dist\", defaultSshOpts);\n\n        await ssh.putDirectory(\n          path.resolve(__dirname, \"../assets-dist/\"),\n          remoteDir + \"assets-dist\",\n          {\n            recursive: true,\n            concurrency: 7,\n            tick(localPath, _, err) {\n              if (err) {\n                console.error(err.message);\n                console.error(localPath);\n              } else console.info(`${localPath} successfully uploaded!`);\n            }\n          }\n        );\n        console.log(\"Upload files completed\");\n\n        // Finally, update hash\n        const { assetsByChunkName } = stat.toJson({\n          hash: true\n        });\n\n        const newAssets = readCurrent(assetsByChunkName);\n\n        await axios\n          .post(\n            \"https://server.vaithuhay.com/b/callback/updateTheme\",\n            newAssets,\n            {\n              httpsAgent: new https.Agent({\n                rejectUnauthorized: false\n              })\n            }\n          )\n          .then(function() {\n            console.log(\"Resource hash has been updated :)\");\n            // console.log(postObj);\n          })\n          .catch(function(err) {\n            console.error(err.message);\n          });\n      });\n    }\n  };\n}\n"]}