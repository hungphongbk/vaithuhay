{"version":3,"sources":["completed.es6.js"],"names":[],"mappings":"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","file":"completed.js","sourcesContent":["import axios from \"axios\";\n// import PromiseSftp from 'promise-sftp'\nimport path from \"path\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport flatten from \"lodash/flatten\";\nimport zipObject from \"lodash/zipObject\";\nimport https from \"https\";\nimport NodeSSH from \"node-ssh\";\nimport chunk from \"lodash/chunk\";\n\nconst localDir = path.join(__dirname, \"../assets/\"),\n  remoteDir = \"/home/phong/api.v1/vaithuhay/\",\n  ssh = new NodeSSH(),\n  ssh2 = new NodeSSH(),\n  defaultSshOpts = { cwd: remoteDir };\n\nfunction getFilePath(relativePath) {\n  return path.resolve(os.homedir(), relativePath);\n}\n\nexport default function(mainAssets) {\n  return {\n    apply(compiler) {\n      const config = {\n          host: \"188.166.177.127\",\n          port: \"2234\",\n          user: \"root\",\n          privateKey: getFilePath(\".ssh/id_rsa\")\n        },\n        [connectPromise, connect2Promise] = [\n          ssh.connect(config),\n          ssh2.connect(config)\n        ];\n\n      function readOld() {\n        return JSON.parse(fs.readFileSync(__dirname + \"/current.json\"));\n      }\n\n      function readCurrent(assets) {\n        const rs = {};\n\n        flatten(Object.values(assets)).forEach(item => {\n          const [file, hash] = item.split(\"?\");\n          rs[file] = hash ? hash : \"\";\n        });\n        return rs;\n      }\n\n      compiler.plugin(\"done\", async function(stat) {\n        // First, empty & re-upload\n        await Promise.all([connectPromise, connect2Promise]);\n        console.log(\"SSH connection successfully\");\n        await ssh.execCommand(\"rm -rf assets-dist\", defaultSshOpts);\n\n        // const uploads = await new Promise(resolve => {\n        //   fs.readdir(\n        //     path.resolve(__dirname, `../assets-dist`),\n        //     (err, items) => {\n        //       resolve(items);\n        //     }\n        //   );\n        // });\n        // function putFile(client, filename) {\n        //   return client\n        //     .putFile(\n        //       path.resolve(__dirname, `../assets-dist/${filename}`),\n        //       remoteDir + `assets-dist/${filename}`\n        //     )\n        //     .then(() => {\n        //       console.log(`${filename} has been uploaded`);\n        //     });\n        // }\n        // for (const filenames of chunk(uploads, 2))\n        //   await Promise.all([\n        //     putFile(ssh, filenames[0]),\n        //     putFile(ssh2, filenames[1])\n        //   ]);\n        // console.log(\"Upload files completed\");\n\n        // Finally, update hash\n        const { assetsByChunkName } = stat.toJson({\n          hash: true\n        });\n\n        const newAssets = readCurrent(assetsByChunkName),\n          postObj = zipObject(\n            mainAssets,\n            mainAssets.map(asset => newAssets[asset])\n          );\n        console.log(newAssets);\n\n        return new Promise(resolve => {\n          axios\n            // .post(\"https://server.vaithuhay.com/b/meta?key=assetHash\", postObj)\n            .post(\n              \"https://server.vaithuhay.com/b/callback/updateTheme\",\n              postObj,\n              {\n                httpsAgent: new https.Agent({\n                  rejectUnauthorized: false\n                })\n              }\n            )\n            .then(function() {\n              console.log(\"Resource hash has been updated :)\");\n              // console.log(postObj);\n              resolve();\n            })\n            .catch(function(err) {\n              console.error(err.message);\n              resolve();\n            });\n        });\n      });\n    }\n  };\n}\n"]}